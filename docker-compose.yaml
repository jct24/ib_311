version: "3.9"

volumes:
  # superset_home:
  #   external: false
  postgres-db-volume:
    external: true
  redis:
    external: false

x-superset-image: &superset-image apache/superset:latest-dev
x-superset-user: &superset-user root
x-superset-depends-on: &superset-depends-on
  - postgres
  - redis
x-superset-volumes: &superset-volumes
  - ./superset/docker:/app/docker
  - ./superset/superset:/app/superset
  - ./superset/superset-frontend:/app/superset-frontend
  - superset_home:/app/superset_home
  - ./superset/tests:/app/tests

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:latest-python3.8}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: inRhXVz-gxC-jRq3W8jOM1lMVga5XAooXxlF7UBVc-s=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__WEBSERVER__RBAC: "true"
    AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: "true"
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: "true"
    # Reload plugins
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: "false"
    _AIRFLOW_DB_UPGRADE: "true"
    _AIRFLOW_WWW_USER_CREATE: "true"
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    # AIRFLOW__CORE__LOGGING_LEVEL: "Debug"
    # _PIP_ADDITIONAL_REQUIREMENTS: ""
    # AIRFLOW__CORE__PLUGINS_FOLDER: "/opt/airflow/plugins"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./sql:/opt/airflow/sql
    - ./test:/opt/airflow/test
    # - ./config/airflow.cfg:/opt/airflow/airflow.cfg
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - POSTGRES_MULTIPLE_DATABASES=superset,postgres:denver,postgres
    ports:
      - 5432:5432
    volumes:
      # initdb only executes if volume is empty
      - ./pg-init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-db-volume:/var/lib/postgresql/data
    command: >
     postgres
       -c listen_addresses=*
       -c logging_collector=on
       -c log_destination=stderr
       -c max_connections=200
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - 6379:6379 
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  superset:
    image: apache/superset:latest
    ports:
      - 8088:8088

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080   
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    # container_name: airflow-worker
    restart: always

  airflow-init:
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow} 
    command: bash -c "
        airflow connections add "postgres_311" --conn-uri "postgres://airflow:airflow@postgres:5432/airflow""

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
